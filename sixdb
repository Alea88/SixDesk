#!/usr/bin/python

# python executable for SixdeskDB
# Moonis Javed <monis.javed@gmail.com>,
# Riccardo De Maria <riccardo.de.maria@cern.ch>
# Xavier Valls Pla  <xavier.valls.pla@cern.ch>
# Danilo Banfi <danilo.banfi@cern.ch>
#
# This software is distributed under the terms of the GNU Lesser General Public
# License version 2.1, copied verbatim in the file ``COPYING''.

# In applying this licence, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as an Intergovernmental Organization or
# submit itself to any jurisdiction.

# Needs Python version >=2.6

import sys,os

if sys.version_info < (2, 6):
  print "SixDeskDB requires Python version >=2.6"
  sys.exit(1)

from sixdeskdb import SixDeskDB,Mad6tOut,RunDaVsTurns
#from dbtocentral,config

def str2bool(st):
  if(st=='True' or st=='true'):
    return True
  else:
    return False

if __name__ == "__main__":
  args = sys.argv[1:]
  helpmsg="""\
Usage: sixdb <command> <arguments>

Commands:
  load_dir <studydir>: load tracking data from from a SixDesk study.
    <studydir>: the directory that contains `sixdeskenv` and `sysenv`
    files like w1/sixjobs/studies/job_tracking.

  da <database>: compute DAres files from database

  mad <database>: analyse the output of mad6t (HL-LHC specific)

  info <database>: printout information from DataBase.

  da_vs_turns <database> [options]: plot DA vs turns.
    options:
    -createdaout (default: True)   : create the DA.out files for the da vs
      turns analysis
    -turnstep (default: 100)       : steps in the number of turns
    -tmax (default: 1.e6)          : maximum number of turns
    -ampmaxsurv (default: 12)      : maximum amplitude for survival plot
    -amprangedavst (default: 4 10) : minimum maximum amplitude for da vs
      turns plots
    -plotlog (default: False)      : if True plot da vs turns in logscale
    -comp <compdirname> <lblname> <complblname>: flag to compare two studies
      (default: False)
      <compdirname>: analysis directory (e.g. studyname-analysis) of
        study to compare with
      <lblname>    : labelname to be used for <database> for plots
      <complblname>: labelname to be used for <compdatabase> for plots
  """
  todebug="""
  restore_dir <database>: restore the directory using data from the database.      Options:
      -basedir: specify a new root for saving data
      -verbose: printout the filename name created
      -dryrun : will not create files and directory
  """
  if args:
  # try:
    if args[0] in ("h", "help"):
      print helpmsg
    elif args[0] in ("load_dir","load_dir"):
      if len(args)==1:
        SixDeskDB.from_dir()
      if len(args)==2:
        SixDeskDB.from_dir(args[1])
      else:
        print "Invocation error: too many arguments see help with h or help"
        print helpmsg
        exit(0)
    elif args[0] in ("restore_dir","restore_dir"):
      dryrun = verbose = False
      if "-verbose" in args:
        verbose = True
        del args[args.index("-verbose")]
      if "-dryrun" in args:
        dryrun = True
        del args[args.index("-dryrun")]
      if len(args) == 2:
        a = SixDeskDB(args[1],'.',verbose,dryrun)
      elif len(args) == 3:
        a = SixDeskDB(args[1],args[2],verbose,dryrun)
      else:
        print "invalid see help with h or help"
        exit(0)
      if a:
        a.load_extra()
        a.load_mad6t_run()
        a.load_mad6t_results()
        a.load_six_beta()
        a.load_six_input_results()
#    elif args[0] in ("dbtocentral"):
#      if len(args) >= 2:
#        host = config.host
#        user = config.user
#        password = config.password
#        db = config.db
#        bo = False
#      elif len(args) == 3:
#        if "bo" in args:
#          bo = True
#          del args[args.index("bo")]
#        else:
#          print "invalid argument"
#          exit(1)
#      else:
#        print 'Invalid number of Arguments'
#        exit(1)
#      dbtocentral(host,user,password,db,args[1],bo)
    elif args[0] in ("info"):
      if len(args)==2:
        a = SixDeskDB(args[1])
        a.info()
        #a.get_missing_fort10()
        #a.get_incomplete_fort10()
      else:
        print "invalid see help with h or help"
        exit(0)
    elif args[0] in ("da","da"):
      if len(args)==2:
        a = SixDeskDB(args[1])
        a.read10b()
      else:
        print "sixdb error: too few arguments for da"
        print helpmsg
        exit(0)
    elif args[0] in ("mad","mad"):
      if len(args)==2:
        a = SixDeskDB(args[1])
        a.mad_out()
      else:
        print "invalid see help with h or help"
        exit(0)
    elif args[0] in ("join10","join10"):
      if len(args)==2:
        a = SixDeskDB(args[1])
        if a.get_missing_fort10() == 0 and a.get_incomplete_fort10() == 0:
          a.join10()
      else:
        print "invalid see help with h or help"
        exit(0)
    elif args[0] in ("da_vs_turns","da_vs_turns"):
        try:
          dbname=args[1]
        except IndexError:
          print "Error in command `da_vs_turns` - you have to specify a database to be analyzed!"
          sys.exit(0)
        # define default values
        try:
            createdaout=str2bool(args[args.index('-createdaout')+1])
        except ValueError:
            createdaout=True
        try:
            turnstep=args[args.index('-turnstep')+1]
        except ValueError:
            turnstep=100
        try:
            tmax=args[args.index('-tmax')+1]
        except ValueError:
            tmax=int(1.e6)
        try:
            ampmaxsurv=args[args.index('-ampmaxsurv')+1]
        except ValueError:
            ampmaxsurv=12
        try:
            ampmindavst=args[args.index('-amprangedavst')+1]
            ampmaxdavst=args[args.index('-amprangedavst')+2]
        except ValueError:
            ampmindavst=4
            ampmaxdavst=10
        try:
            plotlog=str2bool(args[args.index('-plotlog')+1])
        except ValueError:
            plotlog=False
        try:
            comp=str2bool(args[args.index('-comp')+1])
        except ValueError:
            comp=False
            compdirname=''
            lblname=''
            complblname=''
        # now handle exceptions if values are not well defined
        try:
            turnstep=int(turnstep)
        except ValueError:
            print('Error in command `da_vs_turns` - integer value expected for option `turnstep`')
            sys,exit(0)
        try:
            tmax=int(tmax)
        except ValueError:
            print('Error in command `da_vs_turns` - integer value expected for option `tmax`')
            sys,exit(0)
        try:
            ampmaxsurv=float(ampmaxsurv)
        except ValueError:
            print('Error in command `da_vs_turns` - float value expected for option `ampmaxsurv`')
            sys,exit(0)
        try:
            ampmindavst=float(ampmindavst)
        except ValueError:
            print('Error in command `da_vs_turns` - float values expected for option `amprangedavst`')
            sys,exit(0)
        try:
            ampmaxdavst=float(ampmaxdavst)
        except ValueError:
            print('Error in command `da_vs_turns` - float values expected for option `amprangedavst`')
            sys,exit(0)
        if(comp):
          try:
              compdirname=args[args.index('-compdirname')+1]
              lblname=args[args.index('-lblname')+1]
              complblname=args[args.index('-complblname')+1]
          except ValueError:
              print "Error for option -comp=True: If comp=True you have to specify the directory name of the comparison study (-compdirname) and the labelnames for plotting (-lblname,-complblname)"
              sys.exit(0)
        RunDaVsTurns(dbname,createdaout,turnstep,tmax,ampmaxsurv,ampmindavst,ampmaxdavst,plotlog,comp,compdirname,lblname,complblname)
        #open db
        #setup opton
        #call
    elif args[0] in ('interactive',):
      import IPython
      import matplotlib.pyplot as pl
      import numpy, scipy
      try:
        dbame=args[1]
      except IndexError:
        print "Error in command `interactive`: db filename missing"
        sys.exit(0)
      try:
        db=SixDeskDB(dbame)
        IPython.embed()
      except IOError:
        print "Error in command `interactive`"
        pass
    else:
      print 'invalid for help use help or h'
  else:
    print helpmsg
