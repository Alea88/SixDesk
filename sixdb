#!/usr/bin/python

# python executable for Sixdesk
# Moonis Javed (monis.javed@gmail.com),
# Riccardo De Maria (riccardo.de.maria@cern.ch)
# Xavier Valls Pla  (xavier.valls.pla@cern.ch)
#
# Needs Python version >=2.6

import sys,os

from sixdeskdb import SixDeskDB,Mad6tOut

#from dbtocentral,config

if __name__ == "__main__":
  args = sys.argv[1:]
  helpmsg="""\
Usage: sixdb <command> <arguments>

Commands:
    load_dir <studydir>: load data from from a directory tree into the
           database. The directory is read from sixdeskenv and sysenv found in
           studydir (default '.')

    da <database>: compute DAres files from database

    mad <database>: analyse the output of mad6t (HL-LHC specific)

    info <database>: printout information from DataBase.

    da_vs_turns <database> [options]:
        Options:
          -createdaout
          -turnstep <nn>
          -ampmaxsurv <nn>
          -ampmindavst <nn>
          -comp <compstudy> <studylblname> <compstudylblname>
          -plotlog
    interactive <database>: run an interactive ipython shell
    """
  todebug="""
      restore_dir <database>: restore the directory using data from the database.            Options:
            -basedir: specify a new root for saving data
            -verbose: printout the filename name created
            -dryrun : will not create files and directory
  """
  if args:
  # try:
    if args[0] in ("h", "help"):
      print helpmsg
    elif args[0] in ("load_dir","load_dir"):
      if len(args)==1:
        SixDeskDB.from_dir()
      if len(args)==2:
        SixDeskDB.from_dir(args[1])
      else:
        print "Invocation error: too many arguments see help with h or help"
        print helpmsg
        exit(0)
    elif args[0] in ("restore_dir","restore_dir"):
      dryrun = verbose = False
      if "-verbose" in args:
        verbose = True
        del args[args.index("-verbose")]
      if "-dryrun" in args:
        dryrun = True
        del args[args.index("-dryrun")]
      if len(args) == 2:
        a = SixDeskDB(args[1],'.',verbose,dryrun)
      elif len(args) == 3:
        a = SixDeskDB(args[1],args[2],verbose,dryrun)
      else:
        print "invalid see help with h or help"
        exit(0)
      if a:
        a.load_extra()
        a.load_mad6t_run()
        a.load_mad6t_results()
        a.load_six_beta()
        a.load_six_input_results()
#    elif args[0] in ("dbtocentral"):
#      if len(args) >= 2:
#        host = config.host
#        user = config.user
#        password = config.password
#        db = config.db
#        bo = False
#      elif len(args) == 3:
#        if "bo" in args:
#          bo = True
#          del args[args.index("bo")]
#        else:
#          print "invalid argument"
#          exit(1)
#      else:
#        print 'Invalid number of Arguments'
#        exit(1)
#      dbtocentral(host,user,password,db,args[1],bo)
    elif args[0] in ("info"):
      if len(args)==2:
        a = SixDeskDB(args[1])
        a.info()
        a.get_missing_fort10()
        a.get_incomplete_fort10()
      else:
        print "invalid see help with h or help"
        exit(0)
    elif args[0] in ("da","da"):
      if len(args)==2:
        a = SixDeskDB(args[1])
        a.read10b()
      else:
        print "sixdb error: too few arguments for da"
        print helpmsg
        exit(0)
    elif args[0] in ("mad","mad"):
      if len(args)==2:
        a = SixDeskDB(args[1])
        a.mad_out()
      else:
        print "invalid see help with h or help"
        exit(0)
    elif args[0] in ("join10","join10"):
      if len(args)==2:
        a = SixDeskDB(args[1])
        if a.get_missing_fort10() == 0 and a.get_incomplete_fort10() == 0:
          a.join10()
      else:
        print "invalid see help with h or help"
        exit(0)
    elif args[0] in ("da_vs_turns",):
        try:
          dbame=args[1]
        except IndexError:
          print "Error in command `da_vs_turns`"
          sys.exit(0)
        # defaults
        createdaout=True
        comp=False
        # parse arguments
        try:
            opti=args.index('-comp')
            compstudy,studylblname,compstudylblname=args[opti+1,opti+4]
            comp=True
        except ValueError:
            print "Error in option -comp"
            sys.exit(0)
        #open db
        #setup opton
        #call
    elif args[0] in ('interactive',):
      import IPython
      import matplotlib.pyplot as pl
      import numpy, scipy
      try:
        dbame=args[1]
      except IndexError:
        print "Error in command `interactive`: db filename missing"
        sys.exit(0)
      try:
        db=SixDeskDB(dbame)
        IPython.embed()
      except IOError:
        print "Error in command `interactive`"
        pass
    else:
      print 'invalid for help use help or h'
  else:
    print helpmsg
